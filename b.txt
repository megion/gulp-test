
Исследовал предложенный в комментарии код:
https://hcs.jira.lanit.ru/browse/HCS-41609?focusedCommentId=2078702&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-2078702

Сначала рассмотрим предложения по использованию библиотеки http://mathjs.org/
{code:javascript}
// метод format() обрабатывает ошибку округления:
var num = Number(math.format(5.1 * 112.35, 14));

console.log(num);
// 572.985
console.log(num.toFixed(2));
//572.99
{code}

Кажется что результат нас удовлетворяет, но на самом деле это не так. Вот пример когда библиотека будет выдавать не то что мы ожидаем:
{code:javascript}
Number(math.format(410.30495, 14)).toFixed(2)
// "410.30"  

// а теперь наш пример:
Number(math.format(410.30499999999995, 14)).toFixed(2);
// "410.31"

// есть еще один интересный пример:
Number(math.format(99999999.30499915, 14)).toFixed(2); // "99999999.30"
Number(math.format(99999999.304999915, 14)).toFixed(2); // "99999999.31"

{code}

Результат округления в math.format будет зависеть от кол-ва чисел в правой части, кол-ва чисел "9" в левой части и числа precision = 14.

Для понимая приведу исходный код округления в библиотеке mathjs:
{code:javascript}
/**
 * Round the number of digits of a number *
 * @param {SplitValue} split       A value split with .splitNumber(value)
 * @param {number} precision  A positive integer
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 *              with rounded digits
 */
exports.roundDigits = function (split, precision) {
  // create a clone
  var rounded = {
    sign: split.sign,
    coefficients: split.coefficients,
    exponent: split.exponent
  }
  var c = rounded.coefficients;

  // prepend zeros if needed
  while (precision <= 0) {
    c.unshift(0);
    rounded.exponent++;
    precision++;
  }

  if (c.length > precision) {
    var removed = c.splice(precision, c.length - precision);

    if (removed[0] >= 5) {
      var i = precision - 1;
      c[i]++;
      while (c[i] === 10) {
        c.pop();
        if (i === 0) {
          c.unshift(0);
          rounded.exponent++;
          i++;
        }
        i--;
        c[i]++;
      }
    }
  }

  return rounded;
};
{code} 

